worker_processes auto;

# output error log to /dev/stdout
error_log /dev/stdout info;

pid /run/nginx.pid;

events {

    worker_connections  2048;
    multi_accept        on;
    use                 epoll;

}

http {

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    types_hash_max_size 2048;

    # output access log to /dev/stdout
    access_log          /dev/stdout main;
            
    # "keepalive_timeout" value must be greater than or equal to the ELB "Idle timeout" value (Default: 60 seconds).
    keepalive_timeout   65;

    # Required to prevent bypassing of DNS cache!!
    resolver 127.0.0.1 ipv6=off;
            
    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;
            
    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 8;

    # Character set
    charset utf-8;

    # Security Headers
    # Disables emitting nginx version on error pages and in the “Server” response header field.
    server_tokens off;
    
    # Use the X-Frame-Options header to prevent Clickjacking vulnerability on your website.
    # By implementing this header, you instruct the browser not to embed your web page in frame/iframe.
    # This has some limitations in browser support, so you got to check before implementing it.
    # "SAMEORIGIN" - Frame/iframe of content is only allowed from the same site origin.
    # "DENY" - Prevent any domain to embed your content using frame/iframe.
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    # Reference: https://geekflare.com/http-header-implementation/
    add_header X-Frame-Options "DENY" always;
    
    # Prevent MIME types security risk by adding this header to your web page’s HTTP response. 
    # Having this header instruct browser to consider files types as defined and disallow content sniffing. There is only one parameter you got to add “nosniff”.
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    # Reference: https://geekflare.com/http-header-implementation/
    add_header X-Content-Type-Options "nosniff" always;
    
    # X-XSS-Protection header can prevent some level of XSS (cross-site-scripting) attacks, and this is compatible with IE 8+, Chrome, Opera, Safari & Android.
    # "1;mode=block" - XSS filter enabled and prevented rendering the page if attack detected.
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    # Reference: https://geekflare.com/http-header-implementation/
    add_header X-XSS-Protection "1; mode=block" always;
    
    # The X-Permitted-Cross-Domain-Policies header is used to permit cross-domain requests from Flash and PDF documents.
    # The X-Permitted-Cross-Domain-Policies header should ideally be set as restrictively as possible. 
    # If integrating Flash and PDF documents via a different domain is to be prevented completely, it is important to ensure that 
    # there is no crossdomain.xml file in the web directory and that the header described is configured properly.
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    # Reference: https://geekflare.com/http-header-implementation/
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    
    # The X-Download-Options header is specific to Internet Explorer.
    # This disables the option to open a file directly on download.
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    add_header X-Download-Options "noopen" always;
    
    # Prevent Robot Indexing with Response Headers.
    # noindex - A command for the search engine crawlers NOT to index that webpage or website.
    # noarchive - A command for the search engine crawlers should not show a cached link to this page on a search result (SERP).
    # nosnippet - A command for the search engine crawlers Tells not to show a snippet of this page (i.e., meta description) of this page on a search result (SERP).
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    add_header X-Robots-Tag "noindex, noarchive, nosnippet" always;
    
    # HTTP Strict Transport Security (HSTS) 
    # HTTPS (HTTP encrypted with SSL or TLS) is an essential part of the measures to secure traffic to a website, 
    # making it very difficult for an attacker to intercept, modify, or fake traffic between a user and the website.
    # When a browser sees this header from an HTTPS website, it “learns” that this domain must only be accessed using HTTPS (SSL or TLS).
    # It caches this information for the max-age period (typically 31536000 seconds, equal to about 1 year).
    # The optional includeSubDomains parameter tells the browser that the HSTS policy also applies to all subdomains of the current domain.
    # The always parameter ensures that the header is set for all responses, including internally generated error responses.
    # preload - Use if you would like your domain to be included in the HSTS preload list. Removal tends to be slow and painful.
    # Reference: https://hstspreload.org/
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Content-Security-Policy is the name of a HTTP response header that modern browsers use to enhance the security of the document (or web page).
    # The Content-Security-Policy header allows you to restrict how resources such as JavaScript, CSS, or pretty much anything that the browser loads.
    # default-src - The default-src directive defines the default policy for fetching resources such as JavaScript, Images, CSS, Fonts, AJAX requests, Frames, HTML5 Media.
    # self - Allow everything but only from the same origin.
    # always - ensure that nginx sends the header reguardless of response code.
    # Disable the loading of any resources and disable framing, recommended for APIs to use
    # Reference: https://infosec.mozilla.org/guidelines/web_security
    # add_header Content-Security-Policy "default-src 'self';" always;
    
    # Do NOT cache anything
    # Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control
    add_header Cache-Control "no-store";

    # Buffers
    client_header_timeout 300;
    client_body_timeout 300;
    client_max_body_size 5m;

    # Compression
    gzip  on;
    gzip_vary on;
    gzip_comp_level 1;
    gzip_min_length 512;
    gzip_proxied expired no-cache no-store private auth;
    gzip_disable "MSIE [1-6]\.";
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/x-javascript
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/xml
        text/plain
        text/javascript
        text/x-component;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.

    include /etc/nginx/conf.d/*.conf;

}